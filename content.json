{"pages":[{"title":"Untitled","text":"","link":"/Untitled/index-1.html"},{"title":"Untitled","text":"","link":"/Untitled/index.html"}],"posts":[{"title":"使用volley获取HTTP网络请求接口的响应头","text":"一丶解决这个问题的时候先得知道什么响应头，与之对应的还有请求头 二.找到volley内部访问请求返回的response，并获取响应头信息 12345678910protected Response&lt;String&gt; parseNetworkResponse(NetworkResponse response) { String parsed; try { parsed = new String(response.data, &quot;UTF-8&quot;); LogUtil.e(&quot;Header&quot;, response.headers.toString()); } catch (UnsupportedEncodingException var4) { parsed = new String(response.data); } return Response.success(parsed, HttpHeaderParser.parseCacheHeaders(response));} volley内部返回的response可以获取到Header信息，由于header信息是map类型的，所以要获取某个key的值，则通过 response.headers.get(“key”)来获取。","link":"/2020/01/17/%E4%BD%BF%E7%94%A8volley%E8%8E%B7%E5%8F%96HTTP%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%93%8D%E5%BA%94%E5%A4%B4/"},{"title":"将vue项目部署到服务器并通过外网访问的两种方式（springboot中static/nginx）","text":"最近一段时间在用vue写一个前端项目，想着做出来的界面可以让小伙伴们一起看看，分享一下。所以就趁着双11在阿里云买了台服务器。实践中我发现vue项目部署到服务器一共有两种方式，当然也有可能有别的方法。 一.将vue项目打包后生成的dist目录下的文件复制到springboot项目里面 前端vue项目先通过npm run build生成dist目录 2.将dist中目录文件放入springboot项目的resources目录下的static文件夹 3.运行springboot项目，在浏览器地址栏输入localhost:port/index.html(port为后端项目设置的端口号，我设的为8088），所以我输入localhost:8088/index.html即可访问到前端项目 问题来了，这时候会有小伙伴问你这只是本地通过localhost来访问的，别人也访问不了看不到，不是说用外网查看的吗，下面是用外网查看该网页。 4.通过mvn package将springboot项目打包，生成jar包，然后登陆你的阿里云服务器，将jar放到服务器并运行jar包，即可通过外网访问。 ①到项目根目录打开cmd，输入mvn package进行打包，生成jar文件。 ②将jar包放到你的服务器上（我买的是阿里云） 并执行java -jar memoryTravel-0.0.1-SNAPSHOT.jar，即可运行jar包，项目也就运行起来了。这时候你就可以通过服务器的外网ip来访问前端的界面。 而我已经做过域名解析了，所以输入www.fengchi.site:8088/index.html也是可以访问的。 二.将vue项目部署到nginx服务器上，通过设置conf配置文件来进行外网访问。 下载安装nginx，从官网（nginx官网）下载回来解压就好了。接下来打开命令窗口运行nginx服务器 2.修改nginx.conf配置文件 修改过配置文件运行 ./nginx -s reload这时候你就可以通过你的外网ip+你设置的端口去访问你的前端项目了（我这里已经把47.105.177.109解决成www.fengchi.site这个域名了）","link":"/2020/01/17/%E5%B0%86vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E9%80%9A%E8%BF%87%E5%A4%96%E7%BD%91%E8%AE%BF%E9%97%AE%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%88springboot%E4%B8%ADstatic-nginx%EF%BC%89/"},{"title":"React antd的FormItem结合switch设置initialValue无效","text":"当antd formItem结合switch设置initialValue无效时，需要在getFieldDecorator 包装的控件中添加代码valuePropName: ‘checked’，最后的代码呈现是这样的： 123456789&lt;FormItem labelCol={{ span: 5 }} wrapperCol={{ span: 5,offset: 12 }} label=&quot;退回权限&quot;&gt; {form.getFieldDecorator('allowReject', { required: true, initialValue:values.allowReject, valuePropName: 'checked' })( &lt;Switch onChange={approveChange}&gt;&lt;/Switch&gt; )}&lt;/FormItem&gt;","link":"/2020/02/12/React-antd%E7%9A%84FormItem%E7%BB%93%E5%90%88switch%E8%AE%BE%E7%BD%AEinitialValue%E6%97%A0%E6%95%88/"},{"title":"微信小程序Img标签中斜杠(/)与反斜杠(\\)的区别","text":"最近在写微信小程序，其实里面的坑还是又不少的。今天就遇到一个正反斜杠的问题。正好今天写的是图片上传的模块，本地先上传文件，返回给你一段服务器上的图片的地址，然后在小程序端显示。结果在返回的地址是 后来我在img标签下的src属性放入了这个地址，结果就是图片怎么也出不来。后来分析下来原来是src里面放入的是网络地址，必须使用正斜杠（/），而返回给我的地址中存在反斜杠（\\），所以图片加载不出来。后来使用了字符串的replace方法替换即 replace(/\\\\/g,'/');//替换&quot;\\&quot;为&quot;/&quot; 最后替换后的地址是 重新编译成功！","link":"/2020/02/13/1/"},{"title":"react中使用canvas进行图片合成","text":"最近react项目里需要动态变换图片里的某一个部件，然后整张图片重新加载。想了一下之前在java里是使用的ImageIO和BufferedImage进行合成的，看了一下由于项目需求是动态变换图片的，所以想的方法是利用canvas定义一个画布，然后drawImage，最后使用canvas.toDataURL转换成base64的图片，可供下载。项目代码如下，一个js文件即可实现功能。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384import React, { Component } from 'react';class photoSynthesis extends React.Component { constructor(props) { super(props) this.initCanvas = this.initCanvas.bind(this) } initCanvas() { let canvas1 = document.getElementById(&quot;customCanvas&quot;); canvas1.width = 800; canvas1.height = 1300; let context1 = canvas1.getContext(&quot;2d&quot;); context1.rect(0 , 0 , canvas1.width , canvas1.height); context1.fillStyle = &quot;#fff&quot;; context1.fill(); var myImage = new Image(); myImage.src = require(&quot;./diaoding.png&quot;); //背景图片 你自己本地的图片或者在线图片 myImage.crossOrigin = 'Anonymous'; myImage.onload = function(){ context1.drawImage(myImage , 0 , 0 , 627 , 262); // context1.font = &quot;60px Courier New&quot;; // context1.fillText(&quot;合成的图片&quot;,350,450); var myImage2 = new Image(); myImage2.src = require(&quot;./zuoce.png&quot;); //你自己本地的图片或者在线图片 myImage2.crossOrigin = 'Anonymous'; myImage2.onload = function(){ context1.drawImage(myImage2 , 0 , 0 , 138 , 1226); //var base64 = canvas1.toDataURL(&quot;image/png&quot;); //&quot;image/png&quot; 这里注意一下 //var img = document.getElementById('avatar'); // document.getElementById('avatar').src = base64; //img.setAttribute('src' , base64); var myImage3 = new Image(); myImage3.src = require(&quot;./houbi1.png&quot;); //你自己本地的图片或者在线图片 myImage3.crossOrigin = 'Anonymous'; myImage3.onload = function(){ context1.drawImage(myImage3 , 136 , 260 , 360 , 700); //var base64 = canvas1.toDataURL(&quot;image/png&quot;); //&quot;image/png&quot; 这里注意一下 var myImage4 = new Image(); myImage4.src = require(&quot;./youce.png&quot;); //你自己本地的图片或者在线图片 myImage4.crossOrigin = 'Anonymous'; myImage4.onload = function(){ context1.drawImage(myImage4 , 490 , 0 , 135 , 1205); var myImage5 = new Image(); myImage5.src = require(&quot;./diban.png&quot;); //你自己本地的图片或者在线图片 myImage5.crossOrigin = 'Anonymous'; myImage5.onload = function(){ context1.drawImage(myImage5 , 0 , 954 , 630 , 255); var base64 = canvas1.toDataURL(&quot;image/png&quot;); //&quot;image/png&quot; 这里注意一下 //var img = document.getElementById('avatar'); // document.getElementById('avatar').src = base64; //img.setAttribute('src' , base64); } } } } } } componentDidMount() { this.initCanvas() } componentDidUpdate() { this.initCanvas() } render() { const { width, height, canvaswidth, canvasheight } = this.props return ( &lt;div style={{ display:&quot;flex&quot;,flexDirection:&quot;column&quot; }}&gt; &lt;div style={{ display:&quot;flex&quot;,flexDirection:&quot;row&quot; }}&gt; &lt;img style={{ width: 200, height: 83, padding: 10 }} src={require('./diaoding.png')}&gt;&lt;/img&gt; &lt;img style={{ width: 100, height: 200, padding: 10 }} src={require('./zuoce.png')}&gt;&lt;/img&gt; &lt;img style={{ width: 103, height: 200, padding: 10 }} src={require('./houbi1.png')}&gt;&lt;/img&gt; &lt;img style={{ width: 100, height: 200, padding: 10 }} src={require('./youce.png')}&gt;&lt;/img&gt; &lt;img style={{ width: 200, height: 84, padding: 10 }} src={require('./diban.png')}&gt;&lt;/img&gt; &lt;/div&gt; &lt;canvas id=&quot;customCanvas&quot; width={canvaswidth} height={canvasheight}&gt;&lt;/canvas&gt; {/* &lt;img id=&quot;avatar&quot; &gt;&lt;/img&gt; */} &lt;/div&gt; ) }}export default photoSynthesis; csdn链接：https://blog.csdn.net/qq_28670711/article/details/104358345","link":"/2020/02/17/react%E4%B8%AD%E4%BD%BF%E7%94%A8canvas%E8%BF%9B%E8%A1%8C%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90/"}],"tags":[{"name":"android","slug":"android","link":"/tags/android/"},{"name":"http","slug":"http","link":"/tags/http/"},{"name":"Springboot","slug":"Springboot","link":"/tags/Springboot/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"Vue","slug":"Vue","link":"/tags/Vue/"},{"name":"React","slug":"React","link":"/tags/React/"},{"name":"微信小程序","slug":"微信小程序","link":"/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"Canvas","slug":"Canvas","link":"/tags/Canvas/"}],"categories":[{"name":"android","slug":"android","link":"/categories/android/"},{"name":"Springboot","slug":"Springboot","link":"/categories/Springboot/"},{"name":"Vue","slug":"Springboot/Vue","link":"/categories/Springboot/Vue/"},{"name":"React","slug":"React","link":"/categories/React/"}]}